// Voice interaction
// Controllers for voice routes
const twilio = require("twilio");
const { VoiceResponse } = require("twilio").twiml;
const { GoogleGenerativeAI } = require("@google/generative-ai");
const axios = require("axios");

const genAI = new GoogleGenerativeAI(process.env.GPT_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// Twilio config
const twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const TWILIO_PHONE_NUMBER = process.env.TWILIO_PHONE_NUMBER;

const systemPrompt = `
You are a strict medical assistant who must respond exclusively in the language in which the user communicates. 
If the user asks their question in English, or Hindi, your entire answer must be in that language onlyтАФdo not mix languages or revert to another language. 
тЬЕ You ONLY respond to health and symptom-related queries.
тЭМ You DO NOT answer general knowledge, technical, or unrelated questions.
тЬЕ If a query is not related to health, respond with the following message in the user's language:
  - English: "I can only assist with medical-related questions."
  - Hindi: "рдореИрдВ рдХреЗрд╡рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛-рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╢реНрдиреЛрдВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред"
тЬЕ DO NOT diagnose illnessesтАФonly provide general guidance.
тЬЕ Provide structured responses in this format:
  - Possible Causes:
  - What You Can Do:
  - Important
тЬЕ Always advise users to consult a doctor for medical concerns.
Keep responses clear and under 5 sentences.
`;

// func to send sms after call
async function sendSMS(user, message) {
  try {
    const formattedMessage = `
    
    ЁЯУв Sahayak тАУ Your Personal Medical Assistant ЁЯПе

    ЁЯУЭ Here are the details from your recent conversation:
    
    ${message}
    
    тЪая╕П Reminder: This is general guidance. Always consult a doctor for serious concerns.
    
    ЁЯУЮ Need more help? Call us again.
    
    ЁЯЩП Thank you for using Sahayak! Stay healthy. ЁЯШК`;

    await twilioClient.messages.create({
      body: formattedMessage,
      from: TWILIO_PHONE_NUMBER,
      to: user,
    });
    console.log(`SMS Sent to ${user}`);
  } catch (error) {
    console.error("Error sending SMS:", error.message);
  }
}

// Function to ask user to press diff no for different responses, during call
// Press 1 - Connect to emergency sos
// Press 2 - Find nearby doctors and hospitals
// Press 3 - connect to a real doctor
// Press 4 - For general symptom related queries
// Rest buttons after phase 2 features for multiligual support and medicine reminders



// Initial post
const post = async (req, res) => {
  const twiml = new VoiceResponse();
  const lang = req.query.lang || "en";

  const translations = {
    en: {
      welcome: "Hello! Welcome to Sahayak, your personal medical assistant.",
      menu: "Press 1 for emergency services, Press 2 to find nearby hospitals, Press 3 to connect with a doctor, Press 4 for general symptom queries.",
    },
    hi: {
      welcome: "рд╕рд╣рд╛рдпрдХ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрдХред",
      menu: "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рд▓рд┐рдП 1 рджрдмрд╛рдПрдВ, рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП 2, рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХреЗ рд▓рд┐рдП 3, рд╕рд╛рдорд╛рдиреНрдп рд▓рдХреНрд╖рдг рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рд▓рд┐рдП 4 рджрдмрд╛рдПрдВред",
    },
    bn: {
      welcome: "рж╕рж╛рж╣рж╛ржпрж╝ржХрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо, ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рж╣ржХрж╛рж░рзАред",
      menu: "ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛рж░ ржЬржирзНржп 1, ржирж┐ржХржЯржмрж░рзНрждрзА рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржЦрзБржБржЬрждрзЗ 2, ржбрж╛ржХрзНрждрж╛рж░ рж╕ржВржпрзЛржЧрзЗрж░ ржЬржирзНржп 3, рж╕рж╛ржзрж╛рж░ржг рж▓ржХрзНрж╖ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп 4 ржЪрж╛ржкрзБржиред",
    },
  }

  const messages = translations[lang];

  const gather = twiml.gather({
    numDigits: 1,
    action: `/voice/handle-keypress?lang=${lang}`,
    method: "POST",
  });

  // Welcome message
  gather.say(messages.welcome);
  gather.pause();
  // Key presses
  gather.say(messages.menu);

  console.log("VOICE BOT SAYS: " + gather.toString() + "\n");
  res.type("text/xml").send(twiml.toString());
};