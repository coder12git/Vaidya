// Voice interaction
// Controllers for voice routes
const twilio = require("twilio");
const { VoiceResponse } = require("twilio").twiml;
const { GoogleGenerativeAI } = require("@google/generative-ai");
const axios = require("axios");

const genAI = new GoogleGenerativeAI(process.env.GPT_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// Twilio config
const twilioClient = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const TWILIO_PHONE_NUMBER = process.env.TWILIO_PHONE_NUMBER;

const systemPrompt = `
You are a strict medical assistant. 
тЬЕ You ONLY respond to health and symptom-related queries.
тЭМ You DO NOT answer general knowledge, technical, or unrelated questions.
тЬЕ If a query is not related to health, respond with: "I can only assist with medical-related questions."
тЬЕ DO NOT diagnose illnessesтАФonly provide general guidance.
тЬЕ Provide structured responses in this format:
  - Possible Causes:
  - What You Can Do:
  - Important
тЬЕ Always advise users to consult a doctor for medical concerns.
Keep responses clear and under 5 sentences.
`;

// func to send sms after call
async function sendSMS(user, message) {
  try {
    const formattedMessage = `
    
    ЁЯУв Sahayak тАУ Your Personal Medical Assistant ЁЯПе

    ЁЯУЭ Here are the details from your recent conversation:
    
    ${message}
    
    тЪая╕П Reminder: This is general guidance. Always consult a doctor for serious concerns.
    
    ЁЯУЮ Need more help? Call us again.
    
    ЁЯЩП Thank you for using Sahayak! Stay healthy. ЁЯШК`;

    await twilioClient.messages.create({
      body: formattedMessage,
      from: TWILIO_PHONE_NUMBER,
      to: user,
    });
    console.log(`SMS Sent to ${user}`);
  } catch (error) {
    console.error("Error sending SMS:", error.message);
  }
}

// Function to ask user to press diff no for different responses, during call
// Press 1 - Connect to emergency sos
// Press 2 - Find nearby doctors and hospitals
// Press 3 - connect to a real doctor
// Press 4 - For general symptom related queries
// Rest buttons after phase 2 features for multiligual support and medicine reminders



// Initial post
const post = async (req, res) => {
  const twiml = new VoiceResponse();
  const lang = req.query.lang || "en";

  const translations = {
    en: {
      welcome: "Hello! Welcome to Sahayak, your personal medical assistant.",
      menu: "Press 1 for emergency services, Press 2 to find nearby hospitals, Press 3 to connect with a doctor, Press 4 for general symptom queries.",
    },
    hi: {
      welcome: "рд╕рд╣рд╛рдпрдХ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, рдЖрдкрдХрд╛ рдирд┐рдЬреА рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрдХред",
      menu: "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рд▓рд┐рдП 1 рджрдмрд╛рдПрдВ, рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП 2, рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХреЗ рд▓рд┐рдП 3, рд╕рд╛рдорд╛рдиреНрдп рд▓рдХреНрд╖рдг рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рд▓рд┐рдП 4 рджрдмрд╛рдПрдВред",
    },
    bn: {
      welcome: "рж╕рж╛рж╣рж╛ржпрж╝ржХрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо, ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕рж╣ржХрж╛рж░рзАред",
      menu: "ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛рж░ ржЬржирзНржп 1, ржирж┐ржХржЯржмрж░рзНрждрзА рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржЦрзБржБржЬрждрзЗ 2, ржбрж╛ржХрзНрждрж╛рж░ рж╕ржВржпрзЛржЧрзЗрж░ ржЬржирзНржп 3, рж╕рж╛ржзрж╛рж░ржг рж▓ржХрзНрж╖ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп 4 ржЪрж╛ржкрзБржиред",
    },
  }

  const messages = translations[lang];

  const gather = twiml.gather({
    numDigits: 1,
    action: `/voice/handle-keypress?lang=${lang}`,
    method: "POST",
  });

  // Welcome message
  gather.say(messages.welcome);
  gather.pause();
  // Key presses
  gather.say(messages.menu);

  console.log("VOICE BOT SAYS: " + gather.toString() + "\n");
  res.type("text/xml").send(twiml.toString());
};

// Function to handle keypress
const handleKeyPress = async (req, res) => {
  const twiml = new VoiceResponse();
  const lang = req.query.lang || "en";
  const userChoice = req.body.Digits;
  const userPhoneNo = req.body.From;

  const translations = {
    en: {
      emergency: "You requested emergency services. Connecting you now.",
      emergencyThanks: "We hope your consultation was helpful. If you need a follow-up or have any concerns, don't hesitate to contact us. Thank you for using Sahayak. Take care!",
      location: "Please say your location, like a city, neighborhood, or landmark.",
      doctor: "You requested to connect with a doctor. Please stay on the line while we connect your call.",
      doctorThanks: "We hope your consultation was helpful. If you need a follow-up or have any concerns, don't hesitate to contact us. Thank you for using Sahayak. Take care!",
      symptom: "You can ask me about symptoms. Please describe your symptoms after the beep.",
      invalid: "Invalid selection. Please try again."
    },
    hi: {
      emergency: "рдЖрдкрдиреЗ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХрд╛ рдЕрдиреБрд░реЛрдз рдХрд┐рдпрд╛ рд╣реИред рдЖрдкрдХреЛ рдЕрднреА рдХрдиреЗрдХреНрдЯ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред",
      emergencyThanks: "рд╣рдореЗрдВ рдЖрд╢рд╛ рд╣реИ рдХрд┐ рдЖрдкрдХреА рд╕рд▓рд╛рд╣ рдЙрдкрдпреЛрдЧреА рд░рд╣реАред рдпрджрд┐ рдЖрдкрдХреЛ рдЖрдЧреЗ рдХреА рд╕рд╣рд╛рдпрддрд╛ рдпрд╛ рдХреЛрдИ рдЪрд┐рдВрддрд╛ рд╣реЛ, рддреЛ рдХреГрдкрдпрд╛ рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред рд╕рд╣рд╛рдпрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдзреНрдпрд╛рди рд░рдЦреЗрдВ!",
      location: "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдмрддрд╛рдПрдВ, рдЬреИрд╕реЗ рд╢рд╣рд░, рдЗрд▓рд╛рдХрд╛, рдпрд╛ рдХреЛрдИ рдкреНрд░рд╕рд┐рджреНрдз рд╕реНрдерд╛рдиред",
      doctor: "рдЖрдкрдиреЗ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдХрд╛ рдЕрдиреБрд░реЛрдз рдХрд┐рдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдХреЙрд▓ рдкрд░ рдмрдиреЗ рд░рд╣реЗрдВ, рд╣рдо рдЖрдкрдХреА рдХреЙрд▓ рдХрдиреЗрдХреНрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВред",
      doctorThanks: "рд╣рдореЗрдВ рдЖрд╢рд╛ рд╣реИ рдХрд┐ рдЖрдкрдХреА рд╕рд▓рд╛рд╣ рдЙрдкрдпреЛрдЧреА рд░рд╣реАред рдпрджрд┐ рдЖрдкрдХреЛ рдЖрдЧреЗ рдХреА рд╕рд╣рд╛рдпрддрд╛ рдпрд╛ рдХреЛрдИ рдЪрд┐рдВрддрд╛ рд╣реЛ, рддреЛ рдХреГрдкрдпрд╛ рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред рд╕рд╣рд╛рдпрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдзреНрдпрд╛рди рд░рдЦреЗрдВ!",
      symptom: "рдЖрдк рдореБрдЭрд╕реЗ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдХреГрдкрдпрд╛ рдмреАрдк рдХреЗ рдмрд╛рдж рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рдмрддрд╛рдПрдВред",
      invalid: "рдЕрдорд╛рдиреНрдп рдЪрдпрдиред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    },
    bn: {
      emergency: "ржЖржкржирж┐ ржЬрж░рзБрж░рж┐ ржкрж░рж┐рж╖рзЗржмрж╛ ржЕржирзБрж░рзЛржз ржХрж░рзЗржЫрзЗржиред ржЖржкржирж╛ржХрзЗ ржПржЦржи рж╕ржВржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред",
      emergencyThanks: "ржЖржорж░рж╛ ржЖрж╢рж╛ ржХрж░рж┐ ржЖржкржирж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ рж╕рж╣рж╛ржпрж╝ржХ рж╣ржпрж╝рзЗржЫрзЗред ржпржжрж┐ ржЖржкржирж┐ ржлрж▓рзЛ-ржЖржк ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ ржмрж┐рж╖ржпрж╝рзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржкрзНрж░ржпрж╝рзЛржЬржи ржоржирзЗ ржХрж░рзЗржи, рждржмрзЗ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред рж╕рж╛рж╣рж╛ржпрж╝ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред рж╕рж╛ржмржзрж╛ржирзЗ ржерж╛ржХрзБржи!",
      location: "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржмрж▓рзБржи, ржпрзЗржоржи рж╢рж╣рж░, ржкрж╛ржбрж╝рж╛, ржмрж╛ ржПржХржЯрж┐ ржкрж░рж┐ржЪрж┐ржд рж╕рзНржерж╛ржиред",
      doctor: "ржЖржкржирж┐ ржПржХржЬржи ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░рж╛рж░ ржЕржирзБрж░рзЛржз ржХрж░рзЗржЫрзЗржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж▓ ржЪрж╛рж▓рзБ рж░рж╛ржЦрзБржи, ржЖржорж░рж╛ ржЖржкржирж╛рж░ ржХрж▓ рж╕ржВржпрзБржХрзНржд ржХрж░ржЫрж┐ред",
      doctorThanks: "ржЖржорж░рж╛ ржЖрж╢рж╛ ржХрж░рж┐ ржЖржкржирж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ рж╕рж╣рж╛ржпрж╝ржХ рж╣ржпрж╝рзЗржЫрзЗред ржпржжрж┐ ржЖржкржирж┐ ржлрж▓рзЛ-ржЖржк ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ ржмрж┐рж╖ржпрж╝рзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржкрзНрж░ржпрж╝рзЛржЬржи ржоржирзЗ ржХрж░рзЗржи, рждржмрзЗ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред рж╕рж╛рж╣рж╛ржпрж╝ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред рж╕рж╛ржмржзрж╛ржирзЗ ржерж╛ржХрзБржи!",
      symptom: "ржЖржкржирж┐ ржЖржорж╛рж░ рж╕рж╛ржерзЗ рж▓ржХрзНрж╖ржгрзЗрж░ ржмрж┐рж╖ржпрж╝рзЗ ржХржерж╛ ржмрж▓рждрзЗ ржкрж╛рж░рзЗржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржмрж┐ржкрзЗрж░ ржкрж░рзЗ ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржмрж░рзНржгржирж╛ ржХрж░рзБржиред",
      invalid: "ржЕржмрзИржз ржирж┐рж░рзНржмрж╛ржЪржиред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
    }
  }

  const messages = translations[lang];

  switch (userChoice) {
    case "1":
      //Emergency SOS (need thanks message here!!)
      twiml.say(messages.emergency);
      const dial = twiml.dial({
        timeout: 20, //20 sec
        callerId: process.env.TWILIO_PHONE_NUMBER,
      });
      const emergNo = process.env.EMERGENCY_NUMBER;
      dial.number(emergNo);

      twiml.say(messages.emergencyThanks);
      break;

    case "2":
      //Find Nearby Hospitals & Doctors
      const gather = twiml.gather({
        speechTimeout: auto,
        speechModel: "phone_call",
        input: "speech",
        action: `/voice/get-location?lang=${lang}`,
        method: "POST",
      });
      gather.say(messages.location);
      break;
    case "3":
      //Connect to a real doctor ((need thanks message here!!))
      twiml.say(messages.doctor);
      const dialNo = twiml.dial({
        timeout: 20, //20 sec
        callerId: process.env.TWILIO_PHONE_NUMBER,
      });
      const docNumb = process.env.DOCTOR_NUMBER;
      dialNo.number(docNumb);

      twiml.say(messages.doctorThanks);

      break;

    case "4":
      // AI Symptom Checker
      twiml.say(messages.symptom);
      twiml.record({ action: `/voice/respond?lang=${lang}`, method: "POST", maxLength: 30, transcribe: true });
      break;

    default:
      twiml.say(messages.invalid);
      twiml.redirect(`/voice/post?lang=${lang}`);
  }

  res.type("text/xml").send(twiml.toString());
};

// Function to find nearby hospitals and doctors list using google maps places api
const getNearbyHospitals = async (req, res) => {
  const twiml = new VoiceResponse();
  const lang = req.query.lang || "en";
  const userLocation = req.body["SpeechResult"];
  const userPhoneNo = req.body.From;

  const hospTranslations = {
    en: {
      locationError: "I couldn't understand your location. Please try again.",
      notFound: (loc) => `I couldn't find any hospitals near ${loc}. Please try again.`,
      topHospitals: "Here are the top hospitals near you: \n",
      detailsSent: "I've also sent you the details via SMS. Thank you for using Sahayak. Take care!",
      errorMes: "I encountered an issue finding hospitals. Please try again later."
    },
    hi: {
      locationError: "рдореБрдЭреЗ рдЖрдкрдХрд╛ рд╕реНрдерд╛рди рд╕рдордЭ рдореЗрдВ рдирд╣реАрдВ рдЖрдпрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
      notFound: (loc) => `рдореИрдВ ${loc} рдХреЗ рдирдЬрджреАрдХ рдХреЛрдИ рдЕрд╕реНрдкрддрд╛рд▓ рдирд╣реАрдВ рдЦреЛрдЬ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред`,
      topHospitals: "рдЖрдкрдХреЗ рдирдЬрджреАрдХреА рд╢реАрд░реНрд╖ рдЕрд╕реНрдкрддрд╛рд▓ рдпреЗ рд╣реИрдВ: \n",
      detailsSent: "рдореИрдВрдиреЗ рдЖрдкрдХреЛ рдПрд╕рдПрдордПрд╕ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╡рд┐рд╡рд░рдг рднреА рднреЗрдЬ рджрд┐рдпрд╛ рд╣реИред рд╕рд╣рд╛рдпрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗрдВ!",
      errorMes: "рдореБрдЭреЗ рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬрдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рдЖрдИ рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    },
    bn: {
      locationError: "ржЖржорж┐ ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
      notFound: (loc) => `ржЖржорж┐ ${loc} ржПрж░ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржХрзЛржирзЛ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржЦрзБржБржЬрзЗ ржкрж╛ржЗржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред`,
      topHospitals: "ржЖржкржирж╛рж░ ржирж┐ржХржЯржмрж░рзНрждрзА рж╢рзАрж░рзНрж╖ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ржЧрзБрж▓рж┐ рж╣рж▓рзЛ: \n",
      detailsSent: "ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржПрж╕ржПржоржПрж╕ ржПрж░ ржорж╛ржзрзНржпржорзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржкрж╛ржарж┐рзЯрзЗ ржжрж┐рзЯрзЗржЫрж┐ред рж╕рж╛рж╣рж╛ржпрж╝ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржирж┐рж░рж╛ржкржж ржерж╛ржХрзБржи!",
      errorMes: "ржЖржорж┐ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╕ржорзНржорзБржЦрзАржи рж╣ржпрж╝рзЗржЫрж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
    }
  };

  const hospMessages = hospTranslations[lang];

  if (!userLocation) {
    twiml.say(hospMessages.locationError);
    twiml.hangup();
    return res.type("text/xml").send(twiml.toString());
  }

  console.log("User Location:", userLocation);
  try {
    const apiKey = process.env.GOOGLE_PLACES_API_KEY;
    const googleMapsUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=hospitals+near+${encodeURIComponent(userLocation)}&key=${apiKey}`;

    const response = await axios.get(googleMapsUrl);
    const results = response.data.results.slice(0, 1); // Get top 3 results (keeping short for hackathon)

    if (!results.length) {
      twiml.say(hospMessages.notFound(userLocation));
      twiml.hangup();
      return res.type("text/xml").send(twiml.toString());
    }

    const hospitalDetails = [];
    for (const [index, result] of results.entries()) {
      const placeId = result.place_id;
      const fetchPhoneNoURL = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_phone_number,formatted_address&key=${apiKey}`;
      const detailRes = await axios.get(fetchPhoneNoURL);
      const info = `
      ЁЯПе Hospital ${index + 1}:

      ЁЯУМ Name: ${detailRes.data.result.name}
      ЁЯУН Address: ${detailRes.data.result.formatted_address}
      ЁЯУЮ Contact: ${detailRes.data.result.formatted_phone_number || "Not available"}\n`;

      hospitalDetails.push(info);
    }

    let message = hospMessages.topHospitals;
    message += hospitalDetails.join(" ");
    // Speak results on call
    twiml.say(message);
    console.log("AI response for Nearby Hospitals & Doctors: " + hospitalDetails);
    twiml.pause();
    twiml.say(hospMessages.detailsSent);

    twiml.hangup();
    res.type("text/xml").send(twiml.toString());

    // Send SMS of nearby hospitals
    await sendSMS(userPhoneNo, message);

  } catch (error) {
    console.error(`Error fetching hospitals: ${error.message}`);
    twiml.say(hospMessages.errorMes);
    twiml.hangup();
    res.type("text/xml").send(twiml.toString());
  }
};

// Symptom related queries for button 4
const respond = async (req, res) => {
  const twiml = new VoiceResponse();
  const lang = req.query.lang || "en";
  const userPhoneNo = req.body.From;
  const prompt = req.body["SpeechResult"];

  console.log("Twilio Request Body:", req.body);


  // Translations for symptom query responses
  const symptomTranslations = {
    en: {
      empty: "I didn't catch that. Please try again.",
      det: "I've also sent you the details via SMS.",
      final: "I hope this was helpful. Remember, I provide general guidance, but always consult a doctor for serious concerns. Thank you for using Sahayak. Take care!",
      err: "I'm sorry, but I'm having trouble processing your request. Please try again later or consult a doctor for assistance"
    },
    hi: {
      empty: "рдореИрдВ рдЖрдкрдХреА рдмрд╛рдд рдирд╣реАрдВ рд╕реБрди рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
      det: "рдореИрдВрдиреЗ рдЖрдкрдХреЛ рдПрд╕рдПрдордПрд╕ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╡рд┐рд╡рд░рдг рднреА рднреЗрдЬ рджрд┐рдпрд╛ рд╣реИред",
      final: "рдореБрдЭреЗ рдЙрдореНрдореАрдж рд╣реИ рдХрд┐ рдпрд╣ рд╕рд╣рд╛рдпрдХ рд░рд╣рд╛ред рдпрд╛рдж рд░рдЦреЗрдВ, рдореИрдВ рдХреЗрд╡рд▓ рд╕рд╛рдорд╛рдиреНрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реВрдБ, рдЧрдВрднреАрд░ рдорд╛рдорд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╣рдореЗрд╢рд╛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред рд╕рд╣рд╛рдпрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗрдВ!",
      err: "рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рд▓реЗрдХрд┐рди рдореИрдВ рдЖрдкрдХреА рдЕрдиреБрд░реЛрдз рдХреЛ рд╕рдВрд╕рд╛рдзрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣рд╛ рд╣реВрдБред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕реА рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
    },
    bn: {
      empty: "ржЖржорж┐ ржЖржкржирж╛рж░ ржХржерж╛ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
      det: "ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржПрж╕ржПржоржПрж╕ ржПрж░ ржорж╛ржзрзНржпржорзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржкрж╛ржарж┐рзЯрзЗ ржжрж┐рзЯрзЗржЫрж┐ред",
      final: "ржЖржорж┐ ржЖрж╢рж╛ ржХрж░рж┐ ржПржЯрж┐ рж╕рж╣рж╛ржпрж╝ржХ ржЫрж┐рж▓ред ржоржирзЗ рж░рж╛ржЦржмрзЗржи, ржЖржорж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рж╛ржзрж╛рж░ржг ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рж┐, ржЧрзБрж░рзБрждрж░ рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп рж╕рж░рзНржмржжрж╛ ржбрж╛ржХрзНрждрж╛рж░ржХрзЗ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржиред рж╕рж╛рж╣рж╛ржпрж╝ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржирж┐рж░рж╛ржкржж ржерж╛ржХрзБржи!",
      err: "ржЖржорж┐ ржжрзБржГржЦрж┐ржд, ржХрж┐ржирзНрждрзБ ржЖржорж┐ ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ ржкрж╛ржЪрзНржЫрж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржЕржержмрж╛ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп ржПржХржЬржи ржбрж╛ржХрзНрждрж╛рж░ржХрзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рзБржиред"
    }
  };

  const symptomMes = symptomTranslations[lang];

  // here we need a function for empty prompts - need to find that logic.

  console.log("USER ASKED: " + prompt + "\n");

  try {
    const result = await model.generateContent({
      contents: [
        { role: "user", parts: [{ text: `${systemPrompt}\nUser: ${prompt}` }] }
      ]
    });

    const response = await result.response;
    const aiReply = response.text();

    twiml.say(aiReply);
    console.log("General AI RESPONSE ( for general symptom related queries): " + aiReply);

    twiml.pause();
    twiml.say(symptomMes.det);
    twiml.say(symptomMes.final);
    twiml.hangup();

    res.type("text/xml").send(twiml.toString());

    // send sms to user with the details after call
    await sendSMS(userPhoneNo, aiReply);

  } catch (error) {
    console.error(`Error with Gemini API request: ${error.message}`);
    twiml.say(symptomMes.err);
    twiml.hangup();
    res.type("text/xml").send(twiml.toString());
  }
};

module.exports = {
  post,
  respond,
  handleKeyPress,
  getNearbyHospitals,
};

// Sharing the call details via sms - done, need more refining later